local FluxLib = {}
local ts = game:GetService("TweenService")
local animation = Instance.new("BindableEvent")

local function create(a, b)
    local b = b or {}
    local c = Instance.new(a)
    for i, v in pairs(b) do
        c[i] = v
    end
    return c
end

function FluxLib:NewGui(GuiProperties)
    local ArialFont = Enum.Font.Arial

    local Gui = {}
    local GuiTabs = {}

    local function baseElement(ItemContainer, text, description)
        local ItemHolder = create("Frame", {
            Size = UDim2.new(0, 215, 0, 41),
            BackgroundTransparency = 1,
            BorderSizePixel = 1,
            ClipsDescendants = true
        })
        local ItemButton = create("TextButton", {
            Parent = ItemHolder,
            Size = UDim2.new(0, 215, 0, 40),
            Font = ArialFont,
            BorderSizePixel = 0,
            BackgroundColor3 = Color3.fromHex("#12121e"),
            CornerRadius = CornerRadius.new(6, 6, 6, 6),
        })
        local Circle = create("Frame", {
            Size = UDim2.new(0, 7, 0, 7),
            Position = UDim2.new(0, 9, 0.5, -7),
            CornerRadius = CornerRadius.new(6, 6, 6, 6),
            BackgroundColor3 = Color3.fromHex("#ddddf0"),
            BorderSizePixel = 0
        })
        local ItemButtonTitle = create("TextLabel", {
            AnchorPoint = Vector2.new(0, 0.5),
            Position = UDim2.new(0, 22, 0.5, -5),
            Text = text,
            TextColor3 = Color3.fromHex("#ddddf0"),
            Font = ArialFont,
            TextSize = 16
        })

        local Description = create("TextLabel", {
            Parent = ItemButton,
            Text = description,
            Font = ArialFont,
            TextSize = 16,
            TextColor3 = Color3.fromHex("#27273b"),
            Position = UDim2.new(0, 9, 0, 24),
        })

        Circle.Parent = ItemButton
        ItemButtonTitle.Parent = ItemButton
        ItemHolder.Parent = ItemContainer
        return ItemButton, Circle, ItemButtonTitle, ItemHolder
    end

    local SizeX = GuiProperties.SizeX or 370
    local SizeY = 290
    local TitleText = GuiProperties.Title and string.upper(GuiProperties.Title) or "GUI"
    local DescText = GuiProperties.Desc or "Preview"
    local Player = game:GetService("Players").LocalPlayer
    local Mouse = Player:GetMouse()

    local ScreenGui = create("ScreenGui", {
        Parent = game:GetService("CoreGui"),
        Name = "WaveHub",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })

    local Main = create("Frame", {
        Parent = ScreenGui,
        BackgroundColor3 = Color3.fromRGB(38, 38, 43),
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Position = UDim2.new(0.5, -SizeX / 2, 0.5, -SizeY / 2),
        Size = UDim2.new(0, SizeX, 0, SizeY),
    })

    local Title = create("TextLabel", {
        Parent = Main,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Font = ArialFont,
        Text = TitleText,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        TextXAlignment = Enum.TextXAlignment.Left,
        Position = UDim2.new(0, 10, 0, 10)
    })

    local Description = create("TextLabel", {
        Parent = Main,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Font = ArialFont,
        Text = DescText,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        Position = UDim2.new(0, 10, 0, 40)
    })

    local Close = create("TextButton", {
        Parent = Main,
        Size = UDim2.new(0, 20, 0, 20),
        Font = ArialFont,
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundColor3 = Color3.fromRGB(38, 38, 43),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -30, 0, 5),
    })

    Close.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    function Gui:Tab(text, desc)
        local ItemContainer = create("Frame", {
            Parent = Main,
            Size = UDim2.new(1, 0, 1, -70),
            Position = UDim2.new(0, 0, 0, 70),
            BackgroundTransparency = 1,
            Visible = false
        })
        local TabButton = baseElement(GuiTabs[#GuiTabs + 1] and GuiTabs[#GuiTabs].ItemContainer or Main, text, desc)
        TabButton.MouseButton1Click:Connect(function()
            for _, Tab in ipairs(GuiTabs) do
                Tab.ItemContainer.Visible = false
            end
            ItemContainer.Visible = true
        end)
        table.insert(GuiTabs, {
            ItemButton = TabButton,
            ItemContainer = ItemContainer
        })
        return {
            TextButton = TabButton,
            Container = ItemContainer
        }
    end

    function Gui:Label(text)
        local Label = create("TextLabel", {
            Parent = GuiTabs_GetTableIndex(Main).ItemContainer or Main,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Font = ArialFont,
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 20,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            Position = UDim2.new(0, 10, 0, 0)
        })
        return Label
    end

    function Gui:Button(text, callback)
        local ButtonHolder = create("Frame", {
            Parent = GuiTabs_GetTableIndex(Main).ItemContainer or Main,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 41),
            Position = UDim2.new(0, 0, 0, 0),
            ClipsDescendants = true,
        })
        local Button = baseElement(ButtonHolder, text, "")
        Button.MouseButton1Click:Connect(callback)
        return Button
    end

    function Gui:Slider(text, min, max, start, callback)
        local SliderValue = start or min
        local SliderHolder = create("Frame", {
            Parent = GuiTabs_GetTableIndex(Main).ItemContainer or Main,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 61),
            Position = UDim2.new(0, 0, 0, 0),
            ClipsDescendants = true,
        })
        local SliderLabel = baseElement(SliderHolder, text, tostring(SliderValue))
        local SliderBar = create("Frame", {
            Parent = SliderLabel[4],
            Size = UDim2.new(1, -20, 0, 5),
            Position = UDim2.new(0, 10, 1, -20),
            BackgroundColor3 = Color3.fromHex("#2e2e44"),
            BorderSizePixel = 0
        })
        local SliderBarFill = create("Frame", {
            Parent = SliderBar,
            Size = UDim2.new((SliderValue - min) / (max - min), 0, 1, 0),
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundColor3 = Color3.fromHex("#3C3C58"),
            BorderSizePixel = 0
        })
        local SliderDot = create("Frame", {
            Parent = SliderBarFill,
            Size = UDim2.new(0, 10, 0, 10),
            Position = UDim2.new(0, 0, 0.5, -5),
            BackgroundColor3 = Color3.fromHex("#fafafa"),
            BorderSizePixel = 0
        })
        local Down
        local function Slide(input)
            local pos =
                UDim2.new(
                math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1),
                0,
                1,
                0
            )
            SliderBarFill.Size = pos
            local s = math.floor(((pos.X.Scale * max) / max) * (max - min) + min)
            SliderValue = s
            SliderLabel[3].Text = tostring(s)
            callback(s)
        end

        SliderBar.InputBegan:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Slide(input)
                    Down = true
                end
            end
        )

        SliderBar.InputEnded:Connect(
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Down = false
                end
            end
        )

        SliderBar.InputChanged:Connect(
            function(input)
                if
                    input.UserInputType == Enum.UserInputType.MouseMovement or
                        input.UserInputType == Enum.UserInputType.Touch
                 then
                    Slide(input)
                end
            end
        )

        return {
            Set = function(_, v)
                SliderValue = v
                SliderBarFill.Size = UDim2.new((v - min) / (max - min), 0, 1, 0)
                SliderLabel[3].Text = tostring(v)
                callback(v)
            end,
            Get = function()
                return SliderValue
            end
        }
    end

    function Gui:Toggle(text, start, callback)
        local ToggleState = start or false
        local ToggleHolder = create("Frame", {
            Parent = GuiTabs_GetTableIndex(Main).ItemContainer or Main,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 41),
            Position = UDim2.new(0, 0, 0, 0),
            ClipsDescendants = true,
        })
        local ToggleLabel = baseElement(ToggleHolder, text, "")
        local ToggleButton = create("TextButton", {
            Parent = ToggleLabel[4],
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 30, 0, 30),
            Position = UDim2.new(1, -40, 0, 5),
            Text = "",
            Font = ArialFont,
            TextSize = 18,
            TextColor3 = Color3.fromRGB(255, 255, 255),
        })
        local ToggleDot = create("Frame", {
            Parent = ToggleButton,
            BackgroundColor3 = Color3.fromRGB(33, 33, 33),
            Size = UDim2.new(1, -4, 1, -4),
            Position = UDim2.new(0, 2, 0, 2),
        })
        local function update()
            ToggleDot.Position = UDim2.new(ToggleState and 1 or 0, 0, 0.5, -ToggleDot.AbsoluteSize.Y / 2)
            callback(ToggleState)
        end
        update()
        ToggleButton.MouseButton1Click:Connect(
            function()
                ToggleState = not ToggleState
                update()
            end
        )
        return {
            Set = function(_, v)
                ToggleState = v
                update()
            end,
            Get = function()
                return ToggleState
            end
        }
    end

    return Gui
end

return Library
